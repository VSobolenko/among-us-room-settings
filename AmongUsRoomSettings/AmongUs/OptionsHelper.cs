using System.Text;
using AmongUsRoomSettings.Hazel;

namespace AmongUsRoomSettings.AmongUs;

internal class OptionsHelper
{
    public static string GetDebugStringValues(string base64)
    {
        var data = Convert.FromBase64String(base64);
        var reader = MessageReader.Get(data);
        var output = new StringBuilder()
            .AppendLine($"{nameof(Version)}: {reader.ReadByte()}")
            .AppendLine($"Length: {reader.ReadUInt16()}")
            .AppendLine($"MessageReader Tag: {reader.ReadByte()}")
            .AppendLine($"SpecialMode: {reader.ReadByte()}")
            .AppendLine($"RulesPreset: {reader.ReadByte()}")
            .AppendLine($"UNKNOWN: {reader.ReadByte()}")
            .AppendLine($"MaxPlayers: {reader.ReadByte()}")
            .AppendLine($"Keywords: {reader.ReadUInt32()}")
            .AppendLine($"MapId: {reader.ReadByte()}")
            .AppendLine($"PlayerSpeedMod: {reader.ReadSingle()}")
            .AppendLine($"CrewLightMod: {reader.ReadSingle()}")
            .AppendLine($"ImpostorLightMod: {reader.ReadSingle()}")
            .AppendLine($"KillCooldown: {reader.ReadSingle()}")
            .AppendLine($"NumCommonTasks: {reader.ReadByte()}")
            .AppendLine($"NumLongTasks: {reader.ReadByte()}")
            .AppendLine($"NumShortTasks: {reader.ReadByte()}")
            .AppendLine($"NumEmergencyMeetings: {reader.ReadInt32()}")
            .AppendLine($"NumImpostors: {reader.ReadByte()}")
            .AppendLine($"KillDistance: {reader.ReadByte()}")
            .AppendLine($"DiscussionTime: {reader.ReadInt32()}")
            .AppendLine($"VotingTime: {reader.ReadInt32()}")
            .AppendLine($"IsDefaults: {reader.ReadBoolean()}")
            .AppendLine($"EmergencyCooldown: {reader.ReadByte()}")
            .AppendLine($"ConfirmImpostor: {reader.ReadBoolean()}")
            .AppendLine($"VisualTasks: {reader.ReadBoolean()}")
            .AppendLine($"AnonymousVotes: {reader.ReadBoolean()}")
            .AppendLine($"TaskBarMode: {reader.ReadByte()}")
            .AppendLine($"Tag: {reader.ReadByte()}")
            .AppendLine($">>>>> Count Roles: {reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[SHAPESHIFTER] Count: {reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] Chance: {reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] Flag: {reader.ReadUInt16()}{reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] leave skin: {reader.ReadBoolean()}")
            .AppendLine($"[SHAPESHIFTER] cooldown: {reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] duration: {reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] Type: {reader.ReadUInt16()}")
            .AppendLine($"[SCIENTIST] Count: {reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] Chance: {reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] Flag: {reader.ReadUInt16()}{reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] cooldouwn: {reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] charge: {reader.ReadByte()}")
            .AppendLine($"[GUARDANGEL] Type: {reader.ReadUInt16()}")
            .AppendLine($"[GUARDANGEL] Count: {reader.ReadByte()}")
            .AppendLine($"[GUARDANGEL] Chance: {reader.ReadByte()}")
            .AppendLine($"[GUARDANGEL] Flag: {reader.ReadUInt16()}{reader.ReadByte()}")
            .AppendLine($"[GUARDANGEL] cooldouwn: {reader.ReadByte()}")
            .AppendLine($"[GUARDANGEL] duration: {reader.ReadByte()}")
            .AppendLine($"[GUARDANGEL] can see protect: {reader.ReadBoolean()}")
            .AppendLine($"[ENGINIER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[ENGINIER] Count: {reader.ReadByte()}")
            .AppendLine($"[ENGINIER] Chance: {reader.ReadByte()}")
            .AppendLine($"[ENGINIER] Flag: {reader.ReadUInt16()}{reader.ReadByte()}")
            .AppendLine($"[ENGINIER] cooldouwn: {reader.ReadByte()}")
            .AppendLine($"[ENGINIER] vent max time: {reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[NOISEMAKER] Count: {reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] Chance: {reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] Flag: {reader.ReadUInt16()}{reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] aler duration: {reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] impostor view: {reader.ReadBoolean()}")
            .AppendLine($"[PHONTOM] Type: {reader.ReadUInt16()}")
            .AppendLine($"[PHONTOM] Count: {reader.ReadByte()}")
            .AppendLine($"[PHONTOM] Chance: {reader.ReadByte()}")
            .AppendLine($"[PHONTOM] Flag: {reader.ReadUInt16()}{reader.ReadByte()}")
            .AppendLine($"[PHONTOM] cooldown: {reader.ReadByte()}")
            .AppendLine($"[PHONTOM] duration: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[TRACKER] Count: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] Chance: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] Flag: {reader.ReadUInt16()}{reader.ReadByte()}")
            .AppendLine($"[TRACKER] cooldown: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] duration: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] delay: {reader.ReadByte()}");

        return output.ToString();
    }
}