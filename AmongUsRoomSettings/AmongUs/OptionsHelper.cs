using System.Text;
using AmongUsRoomSettings.AmongUs.Client;
using AmongUsRoomSettings.Hazel;

namespace AmongUsRoomSettings.AmongUs;

internal class OptionsHelper
{
    public static string GetDebugStringValues(string base64)
    {
        var data = Convert.FromBase64String(base64);
        var reader = MessageReader.Get(data);
        var output = new StringBuilder()
            .AppendLine($"{nameof(Version)}: {reader.ReadByte()}")
            .AppendLine($"Length: {reader.ReadUInt16()}")
            .AppendLine($"MessageReader Tag: {reader.ReadByte()}")
            .AppendLine($"SpecialMode: {(SpecialGameModes)reader.ReadByte()}")
            .AppendLine($"RulesPreset: {(RulesPresets)reader.ReadByte()}")
            .AppendLine($"UNKNOWN: {reader.ReadByte()}")
            .AppendLine($"MaxPlayers: {reader.ReadByte()}")
            .AppendLine($"Keywords: {(GameKeywords)reader.ReadUInt32()}")
            .AppendLine($"MapId: {reader.ReadByte()}")
            .AppendLine($"PlayerSpeedMod: {reader.ReadSingle()}")
            .AppendLine($"CrewLightMod: {reader.ReadSingle()}")
            .AppendLine($"ImpostorLightMod: {reader.ReadSingle()}")
            .AppendLine($"KillCooldown: {reader.ReadSingle()}")
            .AppendLine($"NumCommonTasks: {reader.ReadByte()}")
            .AppendLine($"NumLongTasks: {reader.ReadByte()}")
            .AppendLine($"NumShortTasks: {reader.ReadByte()}")
            .AppendLine($"NumEmergencyMeetings: {reader.ReadInt32()}")
            .AppendLine($"NumImpostors: {reader.ReadByte()}")
            .AppendLine($"KillDistance: {(KillDistance)reader.ReadByte()}")
            .AppendLine($"DiscussionTime: {reader.ReadInt32()}")
            .AppendLine($"VotingTime: {reader.ReadInt32()}")
            .AppendLine($"IsDefaults: {reader.ReadBoolean()}")
            .AppendLine($"EmergencyCooldown: {reader.ReadByte()}")
            .AppendLine($"ConfirmImpostor: {reader.ReadBoolean()}")
            .AppendLine($"VisualTasks: {reader.ReadBoolean()}")
            .AppendLine($"AnonymousVotes: {reader.ReadBoolean()}")
            .AppendLine($"TaskBarMode: {(TaskBarMode)reader.ReadByte()}")
            .AppendLine($"Tag: {reader.ReadByte()}")
            .AppendLine($">>>>> Count Roles: {reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[SHAPESHIFTER] Count: {reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] Chance: {reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] leave skin: {reader.ReadBoolean()}")
            .AppendLine($"[SHAPESHIFTER] cooldown: {reader.ReadByte()}")
            .AppendLine($"[SHAPESHIFTER] duration: {reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] Type: {reader.ReadUInt16()}")
            .AppendLine($"[SCIENTIST] Count: {reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] Chance: {reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] cooldown: {reader.ReadByte()}")
            .AppendLine($"[SCIENTIST] charge: {reader.ReadByte()}")
            .AppendLine($"[ANGEL] Type: {reader.ReadUInt16()}")
            .AppendLine($"[ANGEL] Count: {reader.ReadByte()}")
            .AppendLine($"[ANGEL] Chance: {reader.ReadByte()}")
            .AppendLine($"[ANGEL] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[ANGEL] cooldown: {reader.ReadByte()}")
            .AppendLine($"[ANGEL] duration: {reader.ReadByte()}")
            .AppendLine($"[ANGEL] can see protect: {reader.ReadBoolean()}")
            .AppendLine($"[ENGINEER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[ENGINEER] Count: {reader.ReadByte()}")
            .AppendLine($"[ENGINEER] Chance: {reader.ReadByte()}")
            .AppendLine($"[ENGINEER] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[ENGINEER] cooldown: {reader.ReadByte()}")
            .AppendLine($"[ENGINEER] vent max time: {reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[NOISEMAKER] Count: {reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] Chance: {reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] alert duration: {reader.ReadByte()}")
            .AppendLine($"[NOISEMAKER] impostor view: {reader.ReadBoolean()}")
            .AppendLine($"[PHANTOM] Type: {reader.ReadUInt16()}")
            .AppendLine($"[PHANTOM] Count: {reader.ReadByte()}")
            .AppendLine($"[PHANTOM] Chance: {reader.ReadByte()}")
            .AppendLine($"[PHANTOM] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[PHANTOM] cooldown: {reader.ReadByte()}")
            .AppendLine($"[PHANTOM] duration: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[TRACKER] Count: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] Chance: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[TRACKER] cooldown: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] duration: {reader.ReadByte()}")
            .AppendLine($"[TRACKER] delay: {reader.ReadByte()}")
            .AppendLine($"[DETECTIVE] Type: {reader.ReadUInt16()}")
            .AppendLine($"[DETECTIVE] Count: {reader.ReadByte()}")
            .AppendLine($"[DETECTIVE] Chance: {reader.ReadByte()}")
            .AppendLine($"[DETECTIVE] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[DETECTIVE] Suspects: {reader.ReadByte()}")
            .AppendLine($"[VIPER] Type: {reader.ReadUInt16()}")
            .AppendLine($"[VIPER] Count: {reader.ReadByte()}")
            .AppendLine($"[VIPER] Chance: {reader.ReadByte()}")
            .AppendLine($"[VIPER] Length/Tag: {reader.ReadUInt16()}/{reader.ReadByte()}")
            .AppendLine($"[VIPER] Dissolve time: {reader.ReadByte()}");

        return output.ToString();
    }
}